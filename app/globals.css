@tailwind base;
@tailwind components;
@tailwind utilities;

/* CyberGuardian Portfolio Design System - Advanced Cybersecurity Aesthetic
All colors MUST be HSL for consistency across light/dark modes.
*/

@layer base {
  :root {
    /* Core Brand Colors - Cybersecurity Theme */
    --background: 0 0% 0%;
    --foreground: 0 0% 100%;

    /* Matrix Green - Primary Brand Color */
    --primary: 125 100% 50%;
    --primary-foreground: 0 0% 0%;
    --primary-glow: 125 100% 60%;
    --primary-dark: 125 100% 30%;

    /* Electric Blue - Secondary Interactive */
    --secondary: 210 100% 50%;
    --secondary-foreground: 0 0% 100%;
    --secondary-glow: 210 100% 60%;

    /* Hacker Red - Accent/Alerts */
    --accent: 345 100% 50%;
    --accent-foreground: 0 0% 100%;
    --accent-glow: 345 100% 60%;

    /* Cyber UI Elements */
    --card: 0 0% 5%;
    --card-foreground: 0 0% 95%;
    --card-border: 125 50% 25%;

    --popover: 0 0% 3%;
    --popover-foreground: 0 0% 95%;

    --muted: 0 0% 10%;
    --muted-foreground: 0 0% 60%;

    --destructive: 345 100% 50%;
    --destructive-foreground: 0 0% 100%;

    --border: 125 30% 20%;
    --input: 0 0% 8%;
    --ring: 125 100% 50%;

    --radius: 0.5rem;

    /* Custom Gradients */
    --gradient-primary: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--primary-glow)) 100%);
    --gradient-secondary: linear-gradient(135deg, hsl(var(--secondary)) 0%, hsl(var(--secondary-glow)) 100%);
    --gradient-accent: linear-gradient(135deg, hsl(var(--accent)) 0%, hsl(var(--accent-glow)) 100%);
    --gradient-cyber: linear-gradient(45deg, hsl(var(--primary)) 0%, hsl(var(--secondary)) 50%, hsl(var(--accent)) 100%);

    /* Shadows & Glows */
    --shadow-primary: 0 0 20px hsl(var(--primary) / 0.5);
    --shadow-secondary: 0 0 20px hsl(var(--secondary) / 0.5);
    --shadow-accent: 0 0 20px hsl(var(--accent) / 0.5);
    --shadow-card: 0 4px 20px hsl(0 0% 0% / 0.8);

    /* Animations */
    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    --transition-cyber: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground overflow-x-hidden;
    font-family: 'JetBrains Mono', 'Courier New', monospace;
  }

  /* Cyberpunk scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: hsl(var(--background));
  }

  ::-webkit-scrollbar-thumb {
    background: hsl(var(--primary));
    border-radius: 4px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: hsl(var(--primary-glow));
  }
}

@layer components {
  /* Cyber glow effects */
  .glow-primary {
    box-shadow: var(--shadow-primary);
  }

  .glow-secondary {
    box-shadow: var(--shadow-secondary);
  }

  .glow-accent {
    box-shadow: var(--shadow-accent);
  }

  /* Glitch text effect */
  .glitch {
    position: relative;
    color: hsl(var(--foreground));
    animation: glitch 2s infinite;
  }

  .glitch::before,
  .glitch::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .glitch::before {
    animation: glitch-1 0.5s infinite;
    color: hsl(var(--primary));
    z-index: -1;
  }

  .glitch::after {
    animation: glitch-2 0.5s infinite;
    color: hsl(var(--accent));
    z-index: -2;
  }

  /* Matrix rain container */
  .matrix-rain {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: -10;
    opacity: 0.1;
  }

  /* Cyber border effect */
  .cyber-border {
    position: relative;
    border: 1px solid hsl(var(--border));
  }

  .cyber-border::before {
    content: '';
    position: absolute;
    top: -1px;
    left: -1px;
    right: -1px;
    bottom: -1px;
    background: var(--gradient-cyber);
    border-radius: inherit;
    z-index: -1;
    opacity: 0;
    transition: opacity var(--transition-cyber);
  }

  .cyber-border:hover::before {
    opacity: 1;
  }

  /* Terminal cursor */
  .cursor::after {
    content: 'â–‹';
    color: hsl(var(--primary));
    animation: blink 1s infinite;
  }

  /* Hover lift effect */
  .hover-lift {
    transition: transform var(--transition-cyber);
  }

  .hover-lift:hover {
    transform: translateY(-4px);
  }
}

@layer utilities {
  /* Custom animations */
  @keyframes glitch {
    0%, 100% { transform: translate(0); }
    20% { transform: translate(-2px, 2px); }
    40% { transform: translate(-2px, -2px); }
    60% { transform: translate(2px, 2px); }
    80% { transform: translate(2px, -2px); }
  }

  @keyframes glitch-1 {
    0%, 100% { transform: translate(0); }
    20% { transform: translate(-1px, 1px); }
    40% { transform: translate(-1px, -1px); }
    60% { transform: translate(1px, 1px); }
    80% { transform: translate(1px, -1px); }
  }

  @keyframes glitch-2 {
    0%, 100% { transform: translate(0); }
    20% { transform: translate(1px, -1px); }
    40% { transform: translate(1px, 1px); }
    60% { transform: translate(-1px, -1px); }
    80% { transform: translate(-1px, 1px); }
  }

  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }

  @keyframes matrix-fall {
    0% { transform: translateY(-100vh); opacity: 1; }
    100% { transform: translateY(100vh); opacity: 0; }
  }

  .animate-matrix-fall {
    animation: matrix-fall linear infinite;
  }
}